具体，请看EventDispatcherActivity，代码和两篇博客

我个人理解如下:
1.点击Button的时候，首先调用的是ViewGroup的dispatchTouchEvent(依次向上查找，比如Button在一个LinearLayout中，向上依次查找，
LinearLayout--->ViewGroup),然后在ViewGroup内部，有一次遍历，判断你点击的区域是否是某个子view，这里点击的是Button，所以必然
是点击的子View，这时候后调用子View(此处是Button,也就是View类的)的dispatchTouchEvent方法，子View如果有设置了OnTouchListener,则先执行onTouch
方法，如果onTouch返回true，则直接返回true了，事件被onTouche消费了，此时Button的Click事件不被执行。如果返回false,则继续调用View
onTouchEvent方法，在其中执行了performClick()来执行子View的click事件。不论上面哪种情况(子view的事件是否被onTouch消费)，此子View
dispatchEvent方法都会返回true， 回到ViewGroup的dispatchTouchEvent中，有个判断，会直接返回true,这方法就走完了，此时以后的代码不
不会执行，也就是说点击子View时，事件被消费了，ViewGroup就不会响应onTouch事件。



2.点击空白区域的时候，还是先调用ViewGroup的dispatchTouchEvent，只是，遍历的时候，没有通过坐标找到子View，自然也不存在子View
的dispatchTouchEvent，方法继续执行，然后调用了return super.dispatchTouchEvent(ev);  此时这个super就是View类(因为ViewGroup的
父类就是View)，然后又像上面一样，调用View的dispatchTouchEvent,和上面第一个情况就一样了。


看起来很生涩难懂，也许过一段时间再看此文字描述就看不懂了(需要借助源码分析，请看csdn博客即可)，但是，需要记住几点:
1.点击屏幕时首先肯定是调用ViewGroup的dispatchTouchEvent方法，然后遍历子View，调用子View的dispatchTouchEvent方法。
2.所有子View都是View的子类，归根结底还是调用View的dispatchTouchEvent方法。包括，ViewGroup点击子View(不用说，被子View消费了)
和空白区(调用ViewGroup的父类的dispatchTouchEvent，还是View).
3.onTouch和onTouchEvent方法的区别.
    从源码中可以看出，这两个方法都是在View的dispatchTouchEvent中调用的，onTouch优先于onTouchEvent执行。
    如果在onTouch方法中通过返回true将事件消费掉，onTouchEvent将不会再执行。

    enable 和clickable(能否点击)是两个不同的概念，切不可混为一谈，一般一个View都是enable的，但是clickable就不一定了.
    比如ImageView clickable = false，你对ImageView设置setOnTouchListener,回调中你会发现，只有ACTION_DOWN这种状态，
    这是因为ImageView默认是clickable = false，调用了onTouch方法之后，调用onTouchEvent时，判断clickable == false
    就直接返回了，所以没有ACTION_UP,ACTION_MOVE之类的了。

    但是如果你设置了对ImageView设置了onClickListener，ACTION_DOWN,ACTION_UP,ACTION_MOVE都有了，这是因为你设置onClickListener
    的时候，ImageView的clickable 也设置成了true.




ViewGroup事件分发核心源码:
    public boolean dispatchTouchEvent(MotionEvent ev) {
        final int action = ev.getAction();
        final float xf = ev.getX();
        final float yf = ev.getY();
        final float scrolledXFloat = xf + mScrollX;
        final float scrolledYFloat = yf + mScrollY;
        final Rect frame = mTempRect;
        boolean disallowIntercept = (mGroupFlags & FLAG_DISALLOW_INTERCEPT) != 0;
        if (action == MotionEvent.ACTION_DOWN) {
            if (mMotionTarget != null) {
                mMotionTarget = null;
            }
            //这里很关键， disallowIntercept表示禁止事件拦截，这个一般都是false,那么完全依赖于onInterceptTouchEvent(ev)，如果onInterceptTouchEvent(ev)的返回值决定了是否能进入下面的条件判断
            //我们知道onInterceptTouchEvent(ev)默认返回的是false，则能进入判断，里面有对ViewGroup中view的遍历，如果发现点击的是其中某一个子View则会调用child.dispatchTouchEvent(ev)，
            //我们知道此方法没有强制改写定会返回true,则此方法就此返回了。我们说事件被子View消费了.如果遍历了一遍没有发现点击的不是任何一个子View，则继续往下走
            if (disallowIntercept || !onInterceptTouchEvent(ev)) {
                ev.setAction(MotionEvent.ACTION_DOWN);
                final int scrolledXInt = (int) scrolledXFloat;
                final int scrolledYInt = (int) scrolledYFloat;
                final View[] children = mChildren;
                final int count = mChildrenCount;
                for (int i = count - 1; i >= 0; i--) {
                    final View child = children[i];
                    if ((child.mViewFlags & VISIBILITY_MASK) == VISIBLE
                            || child.getAnimation() != null) {
                        child.getHitRect(frame);
                        if (frame.contains(scrolledXInt, scrolledYInt)) {
                            final float xc = scrolledXFloat - child.mLeft;
                            final float yc = scrolledYFloat - child.mTop;
                            ev.setLocation(xc, yc);
                            child.mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;
                            if (child.dispatchTouchEvent(ev))  { //这里很关键,调用子View的dispatchTouchEvent，会做判断，我们一般不做强制改写的话，都会返回true，所以整个方法返回了，事件被子View消费了.
                                mMotionTarget = child;
                                return true;
                            }
                        }
                    }
                }
            }
        }
        boolean isUpOrCancel = (action == MotionEvent.ACTION_UP) ||
                (action == MotionEvent.ACTION_CANCEL);
        if (isUpOrCancel) {
            mGroupFlags &= ~FLAG_DISALLOW_INTERCEPT;
        }
        final View target = mMotionTarget;
        if (target == null) {       //上面的for循环里发现没有点击任何子View则，会走到这句，一般target == null为true，则 return super.dispatchTouchEvent(ev);这个super就是View所以………
            ev.setLocation(xf, yf);
            if ((mPrivateFlags & CANCEL_NEXT_UP_EVENT) != 0) {
                ev.setAction(MotionEvent.ACTION_CANCEL);
                mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;
            }
            return super.dispatchTouchEvent(ev);        //这里很关键，super很关键,这里就是你点击一个ViewGroup的空白的时候的从这里调用的View的dispatchTouchEvent(ev);方法也就此返回了
        }
        if (!disallowIntercept && onInterceptTouchEvent(ev)) {
            final float xc = scrolledXFloat - (float) target.mLeft;
            final float yc = scrolledYFloat - (float) target.mTop;
            mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;
            ev.setAction(MotionEvent.ACTION_CANCEL);
            ev.setLocation(xc, yc);
            if (!target.dispatchTouchEvent(ev)) {
            }
            mMotionTarget = null;
            return true;
        }
        if (isUpOrCancel) {
            mMotionTarget = null;
        }
        final float xc = scrolledXFloat - (float) target.mLeft;
        final float yc = scrolledYFloat - (float) target.mTop;
        ev.setLocation(xc, yc);
        if ((target.mPrivateFlags & CANCEL_NEXT_UP_EVENT) != 0) {
            ev.setAction(MotionEvent.ACTION_CANCEL);
            target.mPrivateFlags &= ~CANCEL_NEXT_UP_EVENT;
            mMotionTarget = null;
        }
        return target.dispatchTouchEvent(ev);
    }


    //极其简单，就是返回一个false
    public boolean onInterceptTouchEvent(MotionEvent ev) {
          return false;
    }



View的事件分发核心源码:

        public boolean dispatchTouchEvent(MotionEvent event) {
            if (mInputEventConsistencyVerifier != null) {
                mInputEventConsistencyVerifier.onTouchEvent(event, 0);
            }

            if (onFilterTouchEventForSecurity(event)) {
                //noinspection SimplifiableIfStatement
                ListenerInfo li = mListenerInfo;
                if (li != null && li.mOnTouchListener != null && (mViewFlags & ENABLED_MASK) == ENABLED
                        && li.mOnTouchListener.onTouch(this, event)) { //这句很关键，如果onTouch事件返回true了，则事件被touche消费了，不会有下面的onTouchEvent(event)方法
                    return true;
                }

                if (onTouchEvent(event)) {          //这个很关键，此方法绝大多数情况下，都会返回true,方法就返回true了
                    return true;
                }
            }

            if (mInputEventConsistencyVerifier != null) {
                mInputEventConsistencyVerifier.onUnhandledEvent(event, 0);
            }
            return false;
        }


        //又一个关键的方法
         public boolean onTouchEvent(MotionEvent event) {
                final int viewFlags = mViewFlags;

                if ((viewFlags & ENABLED_MASK) == DISABLED) {
                    if (event.getAction() == MotionEvent.ACTION_UP && (mPrivateFlags & PFLAG_PRESSED) != 0) {
                        setPressed(false);
                    }
                    // A disabled view that is clickable still consumes the touch
                    // events, it just doesn't respond to them.
                    return (((viewFlags & CLICKABLE) == CLICKABLE ||
                            (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE));
                }

                if (mTouchDelegate != null) {
                    if (mTouchDelegate.onTouchEvent(event)) {
                        return true;
                    }
                }

                if (((viewFlags & CLICKABLE) == CLICKABLE ||
                        (viewFlags & LONG_CLICKABLE) == LONG_CLICKABLE)) {
                    switch (event.getAction()) {
                        case MotionEvent.ACTION_UP:
                            boolean prepressed = (mPrivateFlags & PFLAG_PREPRESSED) != 0;
                            if ((mPrivateFlags & PFLAG_PRESSED) != 0 || prepressed) {
                                // take focus if we don't have it already and we should in
                                // touch mode.
                                boolean focusTaken = false;
                                if (isFocusable() && isFocusableInTouchMode() && !isFocused()) {
                                    focusTaken = requestFocus();
                                }

                                if (prepressed) {
                                    // The button is being released before we actually
                                    // showed it as pressed.  Make it show the pressed
                                    // state now (before scheduling the click) to ensure
                                    // the user sees it.
                                    setPressed(true);
                               }

                                if (!mHasPerformedLongPress) {
                                    // This is a tap, so remove the longpress check
                                    removeLongPressCallback();

                                    // Only perform take click actions if we were in the pressed state
                                    if (!focusTaken) {
                                        // Use a Runnable and post this rather than calling
                                        // performClick directly. This lets other visual state
                                        // of the view update before click actions start.
                                        if (mPerformClick == null) {
                                            mPerformClick = new PerformClick();
                                        }
                                        if (!post(mPerformClick)) {
                                            performClick();         //关键代码,点击事件的处理
                                        }
                                    }
                                }

                                if (mUnsetPressedState == null) {
                                    mUnsetPressedState = new UnsetPressedState();
                                }

                                if (prepressed) {
                                    postDelayed(mUnsetPressedState,
                                            ViewConfiguration.getPressedStateDuration());
                                } else if (!post(mUnsetPressedState)) {
                                    // If the post failed, unpress right now
                                    mUnsetPressedState.run();
                                }
                                removeTapCallback();
                            }
                            break;

                        case MotionEvent.ACTION_DOWN:
                            mHasPerformedLongPress = false;

                            if (performButtonActionOnTouchDown(event)) {
                                break;
                            }

                            // Walk up the hierarchy to determine if we're inside a scrolling container.
                            boolean isInScrollingContainer = isInScrollingContainer();

                            // For views inside a scrolling container, delay the pressed feedback for
                            // a short period in case this is a scroll.
                            if (isInScrollingContainer) {
                                mPrivateFlags |= PFLAG_PREPRESSED;
                                if (mPendingCheckForTap == null) {
                                    mPendingCheckForTap = new CheckForTap();
                                }
                                postDelayed(mPendingCheckForTap, ViewConfiguration.getTapTimeout());
                            } else {
                                // Not inside a scrolling container, so show the feedback right away
                                setPressed(true);
                                checkForLongClick(0);
                            }
                            break;

                        case MotionEvent.ACTION_CANCEL:
                            setPressed(false);
                            removeTapCallback();
                            removeLongPressCallback();
                            break;

                        case MotionEvent.ACTION_MOVE:
                            final int x = (int) event.getX();
                            final int y = (int) event.getY();

                            // Be lenient about moving outside of buttons
                            if (!pointInView(x, y, mTouchSlop)) {
                                // Outside button
                                removeTapCallback();
                                if ((mPrivateFlags & PFLAG_PRESSED) != 0) {
                                    // Remove any future long press/tap checks
                                    removeLongPressCallback();

                                    setPressed(false);
                                }
                            }
                            break;
                    }
                    return true;
                }

                return false;
            }
